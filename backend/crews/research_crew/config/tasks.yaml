# src/research_crew/config/tasks.yaml
property_search_task:
  description: >
    Analyze the user query: "{query}" and extract key information about the property search request.
    First, determine what the user is looking for:
    - Is the user looking for properties for sale, for rent, or recently sold?
    - What location is the user interested in?
    - Are there any specific property types mentioned (house, condo, apartment)?
    - Is there a price range mentioned or implied?
    - Are there any bedroom or bathroom requirements?
    - Are there any special features requested?

    Then, use the appropriate realtor tools to search for properties that match these criteria.
    For each property found, collect the following information:
    - Property address and basic details
    - Price and key features
    - Photos (if available)
    - Agent information
    - Environmental risks (if available)
    - Similar properties in the area
    - Market trends for the neighborhood

    If the query is ambiguous, focus on the most likely interpretation and provide the most relevant results.
  expected_output: >
    A comprehensive list of properties that match the search criteria extracted from the user query,
    with each property containing detailed information including address, price, features, photos,
    agent details, and environmental considerations. The list should be well-structured and include
    a summary of market trends for the specified location.
  agent: property_search
  output_file: output/property_list.json

render_report:
  description: >
    Analyze the property list and create a comprehensive report on the properties.
    Your report should:
    1. Begin with an executive summary
    2. Include all key information from the property list
    3. Provide insightful analysis of trends and patterns
    4. Offer recommendations or future considerations
    5. Be formatted in a professional, easy-to-read style with clear headings
  expected_output: >
    A formatted list of properties that match the search criteria extracted from the user query.

  agent: property_search
  context:
    - property_search_task

geo_analysis:
  description: >
    Check out the provided {address} and do some analysis to find out what the geological risk is. You should create a structured json object.
    You should first:
    1. Take in the address and get the unique property track ID ('tract_fips')
    2. Do a quick check of 'ERQK_RISKS' Earthquake Risk Index Score, 'WFIR_RISKS' Wildfire Risk Index Score, 'RFLD_RISKS' Riverine Flood Risk Index Score, 
    'CFLD_RISKS' Coastal Flood Risk Index Score, 'LNDS_RISKS' Landslide Risk Index Score, using the get_geo_data tool using that newly acquired 'tract_fips' ID
    3. If any of the RISK scores are high, we need to dig deeper and search for other field data info. e.g. if the ERQK Earthquake risk index score is high
      3a.use the get_tract_field_names tool to identify all field names related (for this example it would start with 'ERQK')
      3b. use the get_geo_data tool with the list of relevant field names you found to go get that data
      3c. Bring all this info into the JSON object as a subitem fo the corresponding parent field (e.g. ERQK_RISKS for this example)
      3d. Add on "summary" item to the json under it explaining why it has that score and intelligently infering what is going on

    Remember, you dont need to do a deep check into the RISK areas if the risk score is not very high. e.g. 90
    The goal should be to have a clean JSON output with the main RISKS categories listed above, an if there is any additional info, they are child json items

  expected_output: >
    a JSON object containing the results of the basic check (risk scores) and it should also contain any additional info that was identified as child items

  agent: geodeeper_agent
  context:
    - geo_analysis_task
